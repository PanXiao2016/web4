面向对象-继承 多态
	面向对象的三个特征：封装、继承、多态
	继承：
		子类 可以继承 父类 的所有公开的属性和行为
		子类 不去声明 属性方法 父类中存在 
		子类也会存在这些 属性和方法
		父类 只能用自己的属性和方法
	基于原型实现的面向对象：所有的对象  最终都是基于Object
	__proto__：描述对象的原型
	实现继承：改变子类的原型 为父类的原型
	China.prototype = new Person();
	__proto__ 通过对象获得原型 对象调用
	prototype 通过类获得原型 类名调用
	实现子类和父类拥有相同的构造器：call apply
a.__proto__.constructor：获得对象的构造器

类的静态方法（类方法）：
	直接给类 添加属性 或者 行为 
	不需要 实例化 直接用类名调用
通过prototype 添加共享的属性 和 方法（注意：数组 Object 中添加内容 会同步添加到 其他对象中）

原型链：自己->父类（原型）->父类的父类->...

多态：会常和继承配合使用  同一个对象 调用同一个方法 有不同的实现
子类中 有跟父类 相同的方法
子类调用父类:子类的对象.__proto__.方法名()
子类调用自己方法:子类的对象.方法名()


------------------------
1.继承
	改变子类的原型
	通过call apply 实现 子类和父类具有（相同的构造函数）
2.多态
	让子类的原型去调用 方法

	