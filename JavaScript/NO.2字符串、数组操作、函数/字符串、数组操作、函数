字符串 "" '' 是一段文字
	基本使用
		1）可使用""/''
		2）如果字符串中包含字符串 那就使用"我是'字符串'"
		3）转义符 \ 如果想在字符中 添加"" '\"引用的内容\"' 在需要转换字符的前面 添加\
		4）换行符 \n
		5）空一个tab \t	
		6）多行字符串 、内容、 有些代码编辑器和浏览器不支持 尽量不这么去写
		7）+号 连接字符串 "11"+"22" -> "1122"
	字符串的操作
		1）length：获得字符串的长度length
		2）charAt():可通过下标获得对应字符 也可以直接 字符串变量[下标]
		3）charCodeAt()可获得字符对应的ascii对应的十进制数字
		4）String.fromCharCode(70,66)把多个十进制数字 转成字符串
		5）toUpperCase()：全部大写
		6）toLowerCase()：全部小写
		7）toLocaleLowerCase():全部小写 返回本地小写字符串，通常与toLowerCase函数返回值一样，但某些语言，会根据本地的大小写映射返回本地的大小写字符
		8）toLocaleUpperCase()全部大写
		9）indexOf():搜索指定字符出现的位置 注意 查找到 就不会继续查找了 并且区分大小写 如果为查找到值为-1
			string2.indexOf("ds")
			string2.indexOf("ds",3)
		10）lastIndexOf()返回最后一次被搜索字符的位置
			string2.lastIndexOf("s")
			string2.lastIndexOf("s",8)
		11）substring(1,3) 获取某个区间的字符串 不是从指定位置开始 而是从第一个位置开始
		12）string2.substr(-2,3); 获取某个区间的字符串 负数为最后一个字符向后的位数 是从指定位置开始
		13）string2.slice(1,-1) 获取某个区间的字符串 可以使用-1代替字符串的最后一个字符位置

		14）search("f")搜索字符串位置 里面可写正则表达式
		15）match()查找字符串 并提供一个包含查询字符、索引位置、查询原内容的数组 也可使用正则表达式
		16）replace()替换字符  可使用正则string2.replace("WF","#")
		17）split()分割字符串string2.split(",") 分割成数组
		18）anchor()	创建 HTML 锚
数组
	简介：JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素
	是一个有序的元素集合 从0 1 2 3 4到最后 这些数字是下标（索引）

	数组使用 [] 号来表示 里面的元素 使用 , 号隔开 最后一个元素不需要添加,号
	数组中 元素 可以是 任意的类型

	可以通过下标 获取到 数组中对应的元素 ：数组名[下标]
	也可以更改获得到的元素 ：数组名[下标] = 新值
	遍历：挨个读取数组中的每一个元素
	for \for in \while
	数组基本使用：
		1.var list = [元素1,元素2];
		2.var item = list[下标];	
		3.list[下标] = "newValue";	
	数组操作：
		1.length:获得数组的长度 注意 不要直接给他赋值  否则会影响数组的长度
		2.indexOf()：获得某元素的下标
		3.slice()：截取数组
			arr.slice()	拷贝一份
			arr.slice(3) 从索引3开始到结束
			arr.slice(0, 3) 从0开始 到索引3结束 不包括索引3

		4.push：向数组的末尾添加元素
		5.pop：将数组的末尾元素删除
		6.unshift：向数组的头部添加元素 arr.unshift(元素)
		7.shift：将数组的第一个元素删除 arr.shift()


		8.splice var list = [111,223,5553,345,2364,2];
			1.var newList = list32.splice(2,2,66,666) 获得删除的内容
			2.获得拼接后的内容  console.log(list32);

		9.concat：合并数组生成一个新的数组 list = list.concat(["111"]); 
		10.sort：给数组排序 arr.sort()
		11.reverse：反转数组
		12.join：将数组使用指定字符转成字符串
	遍历数组：
	多维数组：
	遍历多维数组：

练习题：
	1.遍历[[[234,3,2],[5,44,33,23,65]],[[44,55,33,11,56],[4,77,43,98],[5,3,77,98,68]]];
	2.删除数组中的第二个元素
	3.替换每一个元素中的第二个元素的第二个元素  为6
	4.在第二个元素中的第一个元素中 尾部添加99

函数：
	简介：
		1.函数是对一些常用的方法的封装
		2.可以模块化程序 减少代码量 提高代码质量 可读性高 便于维护 


		3.函数使用function去定义
		4.函数分为定义和使用
			定义：定义函数是把常用的代码封装到一个位置的过程 写完之后这些代码并不会执行 而是在特殊时候才会去执行
			使用：定义好的函数 在需要的时候 去调用 这时候才回去执行函数中的代码
		5.参数
			形参：代表某个内容的符号 
			实参：实际的内容
			arguments
		6.返回值：使用这个函数 得到的一个结果
	使用：
		1.声明：函数不会去执行 
			function 函数名(形参,形参2) {
    			return 返回值;
			}
		2.调用：函数名(实参,实参2) 函数才会去执行
		3.变量的作用域

作业：
	1.输入一个字符串 查找出里面是否包含"t"
	2.输入一个字符串 将里面的标点符号 替换成空格
	3.截取"我是认真学习的好学生"中的"认真学习"
	4.使用,号 分割这段字符串 "小明,小李,,小宏,小度,小孟"
	5.如果字符串两边有,号 去掉字符两边的,号
	6.将输入的字符串 反转顺序
	7.删除输入的所有q
	8.[66,80,35,99,54]求数组的平均分数
	9.输入10个同学的分数 存入数组 并筛选出最高分
	10.[66,80,35,99,54]找出数组中的最小值
	11.[66,80,35,99,54] 查找数组中35的位置
	游戏





--------------
1.✭✭✭✭给数组中的 数字 进行排序 从小到大 [44,2,100,76,52,50]
2.✭✭✭输入三个数字  查找三个数字中的最大值  （使用函数实现）
3.✭随机得到输入数组的  某个值  使用函数实现
4.✭写一个英雄的数组 {name:"xx",blood:XX,ATT:XX,skills:XXX}
5.✭写一个怪物的数组 {name:"xx",blood:XX,ATT:XX,skills:XXX}
6.✭✭写一个选择 英雄 和 选择怪物的方法
7.✭✭写一个选择 技能 的方法
8.✭✭✭ 写一个互相攻击的方法
9.✭开始游戏的方法

10.[66,80,35,99,54]求数组的平均分数
11.输入10个同学的分数 存入数组 并筛选出最高分
12.[66,80,35,99,54]找出数组中的最小值
13.[66,80,35,99,54] 查找数组中35的位置


